# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetAuthorizationsResult',
    'AwaitableGetAuthorizationsResult',
    'get_authorizations',
    'get_authorizations_output',
]

@pulumi.output_type
class GetAuthorizationsResult:
    """
    A collection of values returned by getAuthorizations.
    """
    def __init__(__self__, authorizations=None, id=None):
        if authorizations and not isinstance(authorizations, list):
            raise TypeError("Expected argument 'authorizations' to be a list")
        pulumi.set(__self__, "authorizations", authorizations)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def authorizations(self) -> Sequence['outputs.GetAuthorizationsAuthorizationResult']:
        return pulumi.get(self, "authorizations")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetAuthorizationsResult(GetAuthorizationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAuthorizationsResult(
            authorizations=self.authorizations,
            id=self.id)


def get_authorizations(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAuthorizationsResult:
    """
    Lists all authorizations.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('influxdb:index/getAuthorizations:getAuthorizations', __args__, opts=opts, typ=GetAuthorizationsResult).value

    return AwaitableGetAuthorizationsResult(
        authorizations=pulumi.get(__ret__, 'authorizations'),
        id=pulumi.get(__ret__, 'id'))


@_utilities.lift_output_func(get_authorizations)
def get_authorizations_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAuthorizationsResult]:
    """
    Lists all authorizations.
    """
    ...
