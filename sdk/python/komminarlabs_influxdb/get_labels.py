# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetLabelsResult',
    'AwaitableGetLabelsResult',
    'get_labels',
    'get_labels_output',
]

@pulumi.output_type
class GetLabelsResult:
    """
    A collection of values returned by getLabels.
    """
    def __init__(__self__, id=None, labels=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, list):
            raise TypeError("Expected argument 'labels' to be a list")
        pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Sequence['outputs.GetLabelsLabelResult']:
        return pulumi.get(self, "labels")


class AwaitableGetLabelsResult(GetLabelsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLabelsResult(
            id=self.id,
            labels=self.labels)


def get_labels(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLabelsResult:
    """
    List all labels.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('influxdb:index/getLabels:getLabels', __args__, opts=opts, typ=GetLabelsResult).value

    return AwaitableGetLabelsResult(
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'))
def get_labels_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLabelsResult]:
    """
    List all labels.
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('influxdb:index/getLabels:getLabels', __args__, opts=opts, typ=GetLabelsResult)
    return __ret__.apply(lambda __response__: GetLabelsResult(
        id=pulumi.get(__response__, 'id'),
        labels=pulumi.get(__response__, 'labels')))
