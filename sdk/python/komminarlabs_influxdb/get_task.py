# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetTaskResult',
    'AwaitableGetTaskResult',
    'get_task',
    'get_task_output',
]

@pulumi.output_type
class GetTaskResult:
    """
    A collection of values returned by getTask.
    """
    def __init__(__self__, authorization_id=None, created_at=None, cron=None, description=None, every=None, flux=None, id=None, labels=None, last_run_error=None, last_run_status=None, latest_completed=None, links=None, name=None, offset=None, org=None, org_id=None, owner_id=None, status=None, updated_at=None):
        if authorization_id and not isinstance(authorization_id, str):
            raise TypeError("Expected argument 'authorization_id' to be a str")
        pulumi.set(__self__, "authorization_id", authorization_id)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if cron and not isinstance(cron, str):
            raise TypeError("Expected argument 'cron' to be a str")
        pulumi.set(__self__, "cron", cron)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if every and not isinstance(every, str):
            raise TypeError("Expected argument 'every' to be a str")
        pulumi.set(__self__, "every", every)
        if flux and not isinstance(flux, str):
            raise TypeError("Expected argument 'flux' to be a str")
        pulumi.set(__self__, "flux", flux)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, list):
            raise TypeError("Expected argument 'labels' to be a list")
        pulumi.set(__self__, "labels", labels)
        if last_run_error and not isinstance(last_run_error, str):
            raise TypeError("Expected argument 'last_run_error' to be a str")
        pulumi.set(__self__, "last_run_error", last_run_error)
        if last_run_status and not isinstance(last_run_status, str):
            raise TypeError("Expected argument 'last_run_status' to be a str")
        pulumi.set(__self__, "last_run_status", last_run_status)
        if latest_completed and not isinstance(latest_completed, str):
            raise TypeError("Expected argument 'latest_completed' to be a str")
        pulumi.set(__self__, "latest_completed", latest_completed)
        if links and not isinstance(links, dict):
            raise TypeError("Expected argument 'links' to be a dict")
        pulumi.set(__self__, "links", links)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if offset and not isinstance(offset, str):
            raise TypeError("Expected argument 'offset' to be a str")
        pulumi.set(__self__, "offset", offset)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if owner_id and not isinstance(owner_id, str):
            raise TypeError("Expected argument 'owner_id' to be a str")
        pulumi.set(__self__, "owner_id", owner_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="authorizationId")
    def authorization_id(self) -> builtins.str:
        """
        The authorization ID. Specifies the authorization used when the task communicates with the query engine.
        """
        return pulumi.get(self, "authorization_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        """
        The timestamp when the task was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def cron(self) -> builtins.str:
        """
        The Cron expression that defines the schedule on which the task runs. InfluxDB uses the system time when evaluating Cron expressions.
        """
        return pulumi.get(self, "cron")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the task.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def every(self) -> builtins.str:
        """
        The interval [duration literal](https://docs.influxdata.com/influxdb/v2/reference/glossary/#rfc3339-timestamp) at which the task runs. every also determines when the task first runs, depending on the specified time.
        """
        return pulumi.get(self, "every")

    @property
    @pulumi.getter
    def flux(self) -> builtins.str:
        """
        The Flux script that the task executes.
        """
        return pulumi.get(self, "flux")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The task ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Sequence['outputs.GetTaskLabelResult']:
        """
        The labels associated with the task.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="lastRunError")
    def last_run_error(self) -> builtins.str:
        """
        The error message from the last task run, if any.
        """
        return pulumi.get(self, "last_run_error")

    @property
    @pulumi.getter(name="lastRunStatus")
    def last_run_status(self) -> builtins.str:
        """
        The status of the last task run.
        """
        return pulumi.get(self, "last_run_status")

    @property
    @pulumi.getter(name="latestCompleted")
    def latest_completed(self) -> builtins.str:
        """
        A timestamp [RFC3339 date/time format](https://docs.influxdata.com/influxdb/v2/reference/glossary/#rfc3339-timestamp) of the latest scheduled and completed run.
        """
        return pulumi.get(self, "latest_completed")

    @property
    @pulumi.getter
    def links(self) -> 'outputs.GetTaskLinksResult':
        """
        Links related to the task.
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the task.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def offset(self) -> builtins.str:
        """
        The duration to delay execution of the task after the scheduled time has elapsed. 0 removes the offset.
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def org(self) -> builtins.str:
        """
        The organization name. Specifies the organization that owns the task.
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> builtins.str:
        """
        The organization ID. Specifies the organization that owns the task.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> builtins.str:
        """
        The user ID. Specifies the owner of the task.
        """
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of the task (`active` or `inactive`).
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> builtins.str:
        """
        The timestamp when the task was last updated.
        """
        return pulumi.get(self, "updated_at")


class AwaitableGetTaskResult(GetTaskResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTaskResult(
            authorization_id=self.authorization_id,
            created_at=self.created_at,
            cron=self.cron,
            description=self.description,
            every=self.every,
            flux=self.flux,
            id=self.id,
            labels=self.labels,
            last_run_error=self.last_run_error,
            last_run_status=self.last_run_status,
            latest_completed=self.latest_completed,
            links=self.links,
            name=self.name,
            offset=self.offset,
            org=self.org,
            org_id=self.org_id,
            owner_id=self.owner_id,
            status=self.status,
            updated_at=self.updated_at)


def get_task(id: Optional[builtins.str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTaskResult:
    """
    List all task.


    :param builtins.str id: The task ID.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('influxdb:index/getTask:getTask', __args__, opts=opts, typ=GetTaskResult).value

    return AwaitableGetTaskResult(
        authorization_id=pulumi.get(__ret__, 'authorization_id'),
        created_at=pulumi.get(__ret__, 'created_at'),
        cron=pulumi.get(__ret__, 'cron'),
        description=pulumi.get(__ret__, 'description'),
        every=pulumi.get(__ret__, 'every'),
        flux=pulumi.get(__ret__, 'flux'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        last_run_error=pulumi.get(__ret__, 'last_run_error'),
        last_run_status=pulumi.get(__ret__, 'last_run_status'),
        latest_completed=pulumi.get(__ret__, 'latest_completed'),
        links=pulumi.get(__ret__, 'links'),
        name=pulumi.get(__ret__, 'name'),
        offset=pulumi.get(__ret__, 'offset'),
        org=pulumi.get(__ret__, 'org'),
        org_id=pulumi.get(__ret__, 'org_id'),
        owner_id=pulumi.get(__ret__, 'owner_id'),
        status=pulumi.get(__ret__, 'status'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_task_output(id: Optional[pulumi.Input[builtins.str]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTaskResult]:
    """
    List all task.


    :param builtins.str id: The task ID.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('influxdb:index/getTask:getTask', __args__, opts=opts, typ=GetTaskResult)
    return __ret__.apply(lambda __response__: GetTaskResult(
        authorization_id=pulumi.get(__response__, 'authorization_id'),
        created_at=pulumi.get(__response__, 'created_at'),
        cron=pulumi.get(__response__, 'cron'),
        description=pulumi.get(__response__, 'description'),
        every=pulumi.get(__response__, 'every'),
        flux=pulumi.get(__response__, 'flux'),
        id=pulumi.get(__response__, 'id'),
        labels=pulumi.get(__response__, 'labels'),
        last_run_error=pulumi.get(__response__, 'last_run_error'),
        last_run_status=pulumi.get(__response__, 'last_run_status'),
        latest_completed=pulumi.get(__response__, 'latest_completed'),
        links=pulumi.get(__response__, 'links'),
        name=pulumi.get(__response__, 'name'),
        offset=pulumi.get(__response__, 'offset'),
        org=pulumi.get(__response__, 'org'),
        org_id=pulumi.get(__response__, 'org_id'),
        owner_id=pulumi.get(__response__, 'owner_id'),
        status=pulumi.get(__response__, 'status'),
        updated_at=pulumi.get(__response__, 'updated_at')))
