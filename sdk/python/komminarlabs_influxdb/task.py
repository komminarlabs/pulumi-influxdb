# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TaskArgs', 'Task']

@pulumi.input_type
class TaskArgs:
    def __init__(__self__, *,
                 flux: pulumi.Input[builtins.str],
                 org_id: pulumi.Input[builtins.str],
                 status: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a Task resource.
        :param pulumi.Input[builtins.str] flux: The [Flux script](https://docs.influxdata.com/influxdb/v2/process-data/get-started/#components-of-a-task) that the task executes.
        :param pulumi.Input[builtins.str] org_id: The organization ID. Specifies the organization that owns the task.
        :param pulumi.Input[builtins.str] status: The status of the task (`active` or `inactive`).
        """
        pulumi.set(__self__, "flux", flux)
        pulumi.set(__self__, "org_id", org_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def flux(self) -> pulumi.Input[builtins.str]:
        """
        The [Flux script](https://docs.influxdata.com/influxdb/v2/process-data/get-started/#components-of-a-task) that the task executes.
        """
        return pulumi.get(self, "flux")

    @flux.setter
    def flux(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "flux", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Input[builtins.str]:
        """
        The organization ID. Specifies the organization that owns the task.
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The status of the task (`active` or `inactive`).
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class _TaskState:
    def __init__(__self__, *,
                 authorization_id: Optional[pulumi.Input[builtins.str]] = None,
                 created_at: Optional[pulumi.Input[builtins.str]] = None,
                 cron: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 every: Optional[pulumi.Input[builtins.str]] = None,
                 flux: Optional[pulumi.Input[builtins.str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input['TaskLabelArgs']]]] = None,
                 last_run_error: Optional[pulumi.Input[builtins.str]] = None,
                 last_run_status: Optional[pulumi.Input[builtins.str]] = None,
                 latest_completed: Optional[pulumi.Input[builtins.str]] = None,
                 links: Optional[pulumi.Input['TaskLinksArgs']] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 offset: Optional[pulumi.Input[builtins.str]] = None,
                 org: Optional[pulumi.Input[builtins.str]] = None,
                 org_id: Optional[pulumi.Input[builtins.str]] = None,
                 owner_id: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering Task resources.
        :param pulumi.Input[builtins.str] authorization_id: The authorization ID. Specifies the authorization used when the task communicates with the query engine.
        :param pulumi.Input[builtins.str] created_at: The timestamp when the task was created.
        :param pulumi.Input[builtins.str] cron: The Cron expression that defines the schedule on which the task runs.
        :param pulumi.Input[builtins.str] description: The description of the task.
        :param pulumi.Input[builtins.str] every: The interval [duration literal](https://docs.influxdata.com/influxdb/v2/reference/glossary/#rfc3339-timestamp) at which the task runs. every also determines when the task first runs, depending on the specified time.
        :param pulumi.Input[builtins.str] flux: The [Flux script](https://docs.influxdata.com/influxdb/v2/process-data/get-started/#components-of-a-task) that the task executes.
        :param pulumi.Input[Sequence[pulumi.Input['TaskLabelArgs']]] labels: The labels associated with the task.
        :param pulumi.Input[builtins.str] last_run_error: The error message from the last task run, if any.
        :param pulumi.Input[builtins.str] last_run_status: The status of the last task run.
        :param pulumi.Input[builtins.str] latest_completed: A timestamp [RFC3339 date/time format](https://docs.influxdata.com/influxdb/v2/reference/glossary/#rfc3339-timestamp) of the latest scheduled and completed run.
        :param pulumi.Input['TaskLinksArgs'] links: Links related to the task.
        :param pulumi.Input[builtins.str] name: The name of the task.
        :param pulumi.Input[builtins.str] offset: The duration to delay execution of the task after the scheduled time has elapsed. 0 removes the offset.
        :param pulumi.Input[builtins.str] org: The organization name. Specifies the organization that owns the task.
        :param pulumi.Input[builtins.str] org_id: The organization ID. Specifies the organization that owns the task.
        :param pulumi.Input[builtins.str] owner_id: The user ID. Specifies the owner of the task.
        :param pulumi.Input[builtins.str] status: The status of the task (`active` or `inactive`).
        :param pulumi.Input[builtins.str] updated_at: The timestamp when the task was last updated.
        """
        if authorization_id is not None:
            pulumi.set(__self__, "authorization_id", authorization_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if cron is not None:
            pulumi.set(__self__, "cron", cron)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if every is not None:
            pulumi.set(__self__, "every", every)
        if flux is not None:
            pulumi.set(__self__, "flux", flux)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if last_run_error is not None:
            pulumi.set(__self__, "last_run_error", last_run_error)
        if last_run_status is not None:
            pulumi.set(__self__, "last_run_status", last_run_status)
        if latest_completed is not None:
            pulumi.set(__self__, "latest_completed", latest_completed)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if offset is not None:
            pulumi.set(__self__, "offset", offset)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="authorizationId")
    def authorization_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The authorization ID. Specifies the authorization used when the task communicates with the query engine.
        """
        return pulumi.get(self, "authorization_id")

    @authorization_id.setter
    def authorization_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "authorization_id", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The timestamp when the task was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def cron(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Cron expression that defines the schedule on which the task runs.
        """
        return pulumi.get(self, "cron")

    @cron.setter
    def cron(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cron", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The description of the task.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def every(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The interval [duration literal](https://docs.influxdata.com/influxdb/v2/reference/glossary/#rfc3339-timestamp) at which the task runs. every also determines when the task first runs, depending on the specified time.
        """
        return pulumi.get(self, "every")

    @every.setter
    def every(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "every", value)

    @property
    @pulumi.getter
    def flux(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The [Flux script](https://docs.influxdata.com/influxdb/v2/process-data/get-started/#components-of-a-task) that the task executes.
        """
        return pulumi.get(self, "flux")

    @flux.setter
    def flux(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "flux", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskLabelArgs']]]]:
        """
        The labels associated with the task.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskLabelArgs']]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="lastRunError")
    def last_run_error(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The error message from the last task run, if any.
        """
        return pulumi.get(self, "last_run_error")

    @last_run_error.setter
    def last_run_error(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "last_run_error", value)

    @property
    @pulumi.getter(name="lastRunStatus")
    def last_run_status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The status of the last task run.
        """
        return pulumi.get(self, "last_run_status")

    @last_run_status.setter
    def last_run_status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "last_run_status", value)

    @property
    @pulumi.getter(name="latestCompleted")
    def latest_completed(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A timestamp [RFC3339 date/time format](https://docs.influxdata.com/influxdb/v2/reference/glossary/#rfc3339-timestamp) of the latest scheduled and completed run.
        """
        return pulumi.get(self, "latest_completed")

    @latest_completed.setter
    def latest_completed(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "latest_completed", value)

    @property
    @pulumi.getter
    def links(self) -> Optional[pulumi.Input['TaskLinksArgs']]:
        """
        Links related to the task.
        """
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: Optional[pulumi.Input['TaskLinksArgs']]):
        pulumi.set(self, "links", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the task.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def offset(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The duration to delay execution of the task after the scheduled time has elapsed. 0 removes the offset.
        """
        return pulumi.get(self, "offset")

    @offset.setter
    def offset(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "offset", value)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The organization name. Specifies the organization that owns the task.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The organization ID. Specifies the organization that owns the task.
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The user ID. Specifies the owner of the task.
        """
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The status of the task (`active` or `inactive`).
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The timestamp when the task was last updated.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("influxdb:index/task:Task")
class Task(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 flux: Optional[pulumi.Input[builtins.str]] = None,
                 org_id: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Creates and manages a task using Flux scripts with task options.

        ## Task Configuration

        Tasks are configured using Flux scripts that include an `option task` block. All task configuration, including scheduling, is defined within the Flux script itself. For more information on Flux scripts and task options, refer to the [InfluxDB documentation on tasks](https://docs.influxdata.com/influxdb/v2/process-data/get-started/#components-of-a-task).

        ### Task Options in Flux

        The Flux script must include an `option task` block that defines the task's behavior. For detailed information about all available task options, see the [InfluxDB documentation on defining task options](https://docs.influxdata.com/influxdb/v2/process-data/get-started/#define-task-options).

        **Example configuration with cron scheduling:**

        ```python
        import pulumi
        import komminarlabs_influxdb as influxdb

        example_cron = influxdb.Task("example_cron",
            org_id=org_id,
            flux=\"\"\"option task = {
          name: "Daily Processing Task",
          cron: "0 0 * * *",        # Run daily at midnight
          offset: 30s,              # Delay execution by 30 seconds
        }
            
        from(bucket: "my-bucket")
          |> range(start: -24h)
          |> filter(fn: (r) => r._measurement == "temperature")
          |> mean()
          |> to(bucket: "daily-averages")
        \"\"\")
        ```

        **Example configuration with interval scheduling:**

        ```python
        import pulumi
        import komminarlabs_influxdb as influxdb

        example_interval = influxdb.Task("example_interval",
            org_id=org_id,
            flux=\"\"\"option task = {
          name: "Hourly Processing Task",
          every: 1h,                # Run every hour
          offset: 10m,              # Start 10 minutes into each hour
        }
            
        from(bucket: "my-bucket")
          |> range(start: -1h)
          |> filter(fn: (r) => r._measurement == "cpu")
          |> mean()
          |> to(bucket: "hourly-stats")
        \"\"\")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] flux: The [Flux script](https://docs.influxdata.com/influxdb/v2/process-data/get-started/#components-of-a-task) that the task executes.
        :param pulumi.Input[builtins.str] org_id: The organization ID. Specifies the organization that owns the task.
        :param pulumi.Input[builtins.str] status: The status of the task (`active` or `inactive`).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates and manages a task using Flux scripts with task options.

        ## Task Configuration

        Tasks are configured using Flux scripts that include an `option task` block. All task configuration, including scheduling, is defined within the Flux script itself. For more information on Flux scripts and task options, refer to the [InfluxDB documentation on tasks](https://docs.influxdata.com/influxdb/v2/process-data/get-started/#components-of-a-task).

        ### Task Options in Flux

        The Flux script must include an `option task` block that defines the task's behavior. For detailed information about all available task options, see the [InfluxDB documentation on defining task options](https://docs.influxdata.com/influxdb/v2/process-data/get-started/#define-task-options).

        **Example configuration with cron scheduling:**

        ```python
        import pulumi
        import komminarlabs_influxdb as influxdb

        example_cron = influxdb.Task("example_cron",
            org_id=org_id,
            flux=\"\"\"option task = {
          name: "Daily Processing Task",
          cron: "0 0 * * *",        # Run daily at midnight
          offset: 30s,              # Delay execution by 30 seconds
        }
            
        from(bucket: "my-bucket")
          |> range(start: -24h)
          |> filter(fn: (r) => r._measurement == "temperature")
          |> mean()
          |> to(bucket: "daily-averages")
        \"\"\")
        ```

        **Example configuration with interval scheduling:**

        ```python
        import pulumi
        import komminarlabs_influxdb as influxdb

        example_interval = influxdb.Task("example_interval",
            org_id=org_id,
            flux=\"\"\"option task = {
          name: "Hourly Processing Task",
          every: 1h,                # Run every hour
          offset: 10m,              # Start 10 minutes into each hour
        }
            
        from(bucket: "my-bucket")
          |> range(start: -1h)
          |> filter(fn: (r) => r._measurement == "cpu")
          |> mean()
          |> to(bucket: "hourly-stats")
        \"\"\")
        ```

        :param str resource_name: The name of the resource.
        :param TaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 flux: Optional[pulumi.Input[builtins.str]] = None,
                 org_id: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TaskArgs.__new__(TaskArgs)

            if flux is None and not opts.urn:
                raise TypeError("Missing required property 'flux'")
            __props__.__dict__["flux"] = flux
            if org_id is None and not opts.urn:
                raise TypeError("Missing required property 'org_id'")
            __props__.__dict__["org_id"] = org_id
            __props__.__dict__["status"] = status
            __props__.__dict__["authorization_id"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["cron"] = None
            __props__.__dict__["description"] = None
            __props__.__dict__["every"] = None
            __props__.__dict__["labels"] = None
            __props__.__dict__["last_run_error"] = None
            __props__.__dict__["last_run_status"] = None
            __props__.__dict__["latest_completed"] = None
            __props__.__dict__["links"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["offset"] = None
            __props__.__dict__["org"] = None
            __props__.__dict__["owner_id"] = None
            __props__.__dict__["updated_at"] = None
        super(Task, __self__).__init__(
            'influxdb:index/task:Task',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            authorization_id: Optional[pulumi.Input[builtins.str]] = None,
            created_at: Optional[pulumi.Input[builtins.str]] = None,
            cron: Optional[pulumi.Input[builtins.str]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            every: Optional[pulumi.Input[builtins.str]] = None,
            flux: Optional[pulumi.Input[builtins.str]] = None,
            labels: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TaskLabelArgs', 'TaskLabelArgsDict']]]]] = None,
            last_run_error: Optional[pulumi.Input[builtins.str]] = None,
            last_run_status: Optional[pulumi.Input[builtins.str]] = None,
            latest_completed: Optional[pulumi.Input[builtins.str]] = None,
            links: Optional[pulumi.Input[Union['TaskLinksArgs', 'TaskLinksArgsDict']]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            offset: Optional[pulumi.Input[builtins.str]] = None,
            org: Optional[pulumi.Input[builtins.str]] = None,
            org_id: Optional[pulumi.Input[builtins.str]] = None,
            owner_id: Optional[pulumi.Input[builtins.str]] = None,
            status: Optional[pulumi.Input[builtins.str]] = None,
            updated_at: Optional[pulumi.Input[builtins.str]] = None) -> 'Task':
        """
        Get an existing Task resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] authorization_id: The authorization ID. Specifies the authorization used when the task communicates with the query engine.
        :param pulumi.Input[builtins.str] created_at: The timestamp when the task was created.
        :param pulumi.Input[builtins.str] cron: The Cron expression that defines the schedule on which the task runs.
        :param pulumi.Input[builtins.str] description: The description of the task.
        :param pulumi.Input[builtins.str] every: The interval [duration literal](https://docs.influxdata.com/influxdb/v2/reference/glossary/#rfc3339-timestamp) at which the task runs. every also determines when the task first runs, depending on the specified time.
        :param pulumi.Input[builtins.str] flux: The [Flux script](https://docs.influxdata.com/influxdb/v2/process-data/get-started/#components-of-a-task) that the task executes.
        :param pulumi.Input[Sequence[pulumi.Input[Union['TaskLabelArgs', 'TaskLabelArgsDict']]]] labels: The labels associated with the task.
        :param pulumi.Input[builtins.str] last_run_error: The error message from the last task run, if any.
        :param pulumi.Input[builtins.str] last_run_status: The status of the last task run.
        :param pulumi.Input[builtins.str] latest_completed: A timestamp [RFC3339 date/time format](https://docs.influxdata.com/influxdb/v2/reference/glossary/#rfc3339-timestamp) of the latest scheduled and completed run.
        :param pulumi.Input[Union['TaskLinksArgs', 'TaskLinksArgsDict']] links: Links related to the task.
        :param pulumi.Input[builtins.str] name: The name of the task.
        :param pulumi.Input[builtins.str] offset: The duration to delay execution of the task after the scheduled time has elapsed. 0 removes the offset.
        :param pulumi.Input[builtins.str] org: The organization name. Specifies the organization that owns the task.
        :param pulumi.Input[builtins.str] org_id: The organization ID. Specifies the organization that owns the task.
        :param pulumi.Input[builtins.str] owner_id: The user ID. Specifies the owner of the task.
        :param pulumi.Input[builtins.str] status: The status of the task (`active` or `inactive`).
        :param pulumi.Input[builtins.str] updated_at: The timestamp when the task was last updated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TaskState.__new__(_TaskState)

        __props__.__dict__["authorization_id"] = authorization_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["cron"] = cron
        __props__.__dict__["description"] = description
        __props__.__dict__["every"] = every
        __props__.__dict__["flux"] = flux
        __props__.__dict__["labels"] = labels
        __props__.__dict__["last_run_error"] = last_run_error
        __props__.__dict__["last_run_status"] = last_run_status
        __props__.__dict__["latest_completed"] = latest_completed
        __props__.__dict__["links"] = links
        __props__.__dict__["name"] = name
        __props__.__dict__["offset"] = offset
        __props__.__dict__["org"] = org
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["owner_id"] = owner_id
        __props__.__dict__["status"] = status
        __props__.__dict__["updated_at"] = updated_at
        return Task(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authorizationId")
    def authorization_id(self) -> pulumi.Output[builtins.str]:
        """
        The authorization ID. Specifies the authorization used when the task communicates with the query engine.
        """
        return pulumi.get(self, "authorization_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[builtins.str]:
        """
        The timestamp when the task was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def cron(self) -> pulumi.Output[builtins.str]:
        """
        The Cron expression that defines the schedule on which the task runs.
        """
        return pulumi.get(self, "cron")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[builtins.str]:
        """
        The description of the task.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def every(self) -> pulumi.Output[builtins.str]:
        """
        The interval [duration literal](https://docs.influxdata.com/influxdb/v2/reference/glossary/#rfc3339-timestamp) at which the task runs. every also determines when the task first runs, depending on the specified time.
        """
        return pulumi.get(self, "every")

    @property
    @pulumi.getter
    def flux(self) -> pulumi.Output[builtins.str]:
        """
        The [Flux script](https://docs.influxdata.com/influxdb/v2/process-data/get-started/#components-of-a-task) that the task executes.
        """
        return pulumi.get(self, "flux")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Sequence['outputs.TaskLabel']]:
        """
        The labels associated with the task.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="lastRunError")
    def last_run_error(self) -> pulumi.Output[builtins.str]:
        """
        The error message from the last task run, if any.
        """
        return pulumi.get(self, "last_run_error")

    @property
    @pulumi.getter(name="lastRunStatus")
    def last_run_status(self) -> pulumi.Output[builtins.str]:
        """
        The status of the last task run.
        """
        return pulumi.get(self, "last_run_status")

    @property
    @pulumi.getter(name="latestCompleted")
    def latest_completed(self) -> pulumi.Output[builtins.str]:
        """
        A timestamp [RFC3339 date/time format](https://docs.influxdata.com/influxdb/v2/reference/glossary/#rfc3339-timestamp) of the latest scheduled and completed run.
        """
        return pulumi.get(self, "latest_completed")

    @property
    @pulumi.getter
    def links(self) -> pulumi.Output['outputs.TaskLinks']:
        """
        Links related to the task.
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the task.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def offset(self) -> pulumi.Output[builtins.str]:
        """
        The duration to delay execution of the task after the scheduled time has elapsed. 0 removes the offset.
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[builtins.str]:
        """
        The organization name. Specifies the organization that owns the task.
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[builtins.str]:
        """
        The organization ID. Specifies the organization that owns the task.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> pulumi.Output[builtins.str]:
        """
        The user ID. Specifies the owner of the task.
        """
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[builtins.str]:
        """
        The status of the task (`active` or `inactive`).
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[builtins.str]:
        """
        The timestamp when the task was last updated.
        """
        return pulumi.get(self, "updated_at")

