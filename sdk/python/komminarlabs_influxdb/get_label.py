# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetLabelResult',
    'AwaitableGetLabelResult',
    'get_label',
    'get_label_output',
]

@pulumi.output_type
class GetLabelResult:
    """
    A collection of values returned by getLabel.
    """
    def __init__(__self__, id=None, name=None, org_id=None, properties=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if properties and not isinstance(properties, dict):
            raise TypeError("Expected argument 'properties' to be a dict")
        pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The label ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The label name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> builtins.str:
        """
        The organization ID.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def properties(self) -> Mapping[str, builtins.str]:
        """
        The key-value pairs associated with this label.
        """
        return pulumi.get(self, "properties")


class AwaitableGetLabelResult(GetLabelResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLabelResult(
            id=self.id,
            name=self.name,
            org_id=self.org_id,
            properties=self.properties)


def get_label(id: Optional[builtins.str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLabelResult:
    """
    Retrieves a label with label ID.


    :param builtins.str id: The label ID.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('influxdb:index/getLabel:getLabel', __args__, opts=opts, typ=GetLabelResult).value

    return AwaitableGetLabelResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        org_id=pulumi.get(__ret__, 'org_id'),
        properties=pulumi.get(__ret__, 'properties'))
def get_label_output(id: Optional[pulumi.Input[builtins.str]] = None,
                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLabelResult]:
    """
    Retrieves a label with label ID.


    :param builtins.str id: The label ID.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('influxdb:index/getLabel:getLabel', __args__, opts=opts, typ=GetLabelResult)
    return __ret__.apply(lambda __response__: GetLabelResult(
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        org_id=pulumi.get(__response__, 'org_id'),
        properties=pulumi.get(__response__, 'properties')))
