# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetAuthorizationResult',
    'AwaitableGetAuthorizationResult',
    'get_authorization',
    'get_authorization_output',
]

@pulumi.output_type
class GetAuthorizationResult:
    """
    A collection of values returned by getAuthorization.
    """
    def __init__(__self__, created_at=None, description=None, id=None, org=None, org_id=None, permissions=None, status=None, token=None, updated_at=None, user=None, user_id=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if permissions and not isinstance(permissions, list):
            raise TypeError("Expected argument 'permissions' to be a list")
        pulumi.set(__self__, "permissions", permissions)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if token and not isinstance(token, str):
            raise TypeError("Expected argument 'token' to be a str")
        pulumi.set(__self__, "token", token)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if user and not isinstance(user, str):
            raise TypeError("Expected argument 'user' to be a str")
        pulumi.set(__self__, "user", user)
        if user_id and not isinstance(user_id, str):
            raise TypeError("Expected argument 'user_id' to be a str")
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        Authorization creation date.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A description of the token.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The authorization ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def org(self) -> str:
        """
        Organization name. Specifies the organization that owns the authorization.
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        """
        An organization ID. Specifies the organization that owns the authorization.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def permissions(self) -> Sequence['outputs.GetAuthorizationPermissionResult']:
        """
        A list of permissions for an authorization.
        """
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the token.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def token(self) -> str:
        """
        The API token.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        Last Authorization update date.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def user(self) -> str:
        """
        A user name. Specifies the user that the authorization is scoped to.
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        A user ID. Specifies the user that the authorization is scoped to.
        """
        return pulumi.get(self, "user_id")


class AwaitableGetAuthorizationResult(GetAuthorizationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAuthorizationResult(
            created_at=self.created_at,
            description=self.description,
            id=self.id,
            org=self.org,
            org_id=self.org_id,
            permissions=self.permissions,
            status=self.status,
            token=self.token,
            updated_at=self.updated_at,
            user=self.user,
            user_id=self.user_id)


def get_authorization(id: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAuthorizationResult:
    """
    Retrieves an authorization. Use this data source to retrieve information about an API token, including the token's permissions and the user that the token is scoped to.


    :param str id: A resource ID. Identifies a specific resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('influxdb:index/getAuthorization:getAuthorization', __args__, opts=opts, typ=GetAuthorizationResult).value

    return AwaitableGetAuthorizationResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        org=pulumi.get(__ret__, 'org'),
        org_id=pulumi.get(__ret__, 'org_id'),
        permissions=pulumi.get(__ret__, 'permissions'),
        status=pulumi.get(__ret__, 'status'),
        token=pulumi.get(__ret__, 'token'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        user=pulumi.get(__ret__, 'user'),
        user_id=pulumi.get(__ret__, 'user_id'))


@_utilities.lift_output_func(get_authorization)
def get_authorization_output(id: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAuthorizationResult]:
    """
    Retrieves an authorization. Use this data source to retrieve information about an API token, including the token's permissions and the user that the token is scoped to.


    :param str id: A resource ID. Identifies a specific resource.
    """
    ...
