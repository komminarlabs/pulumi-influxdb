// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package influxdb

import (
	"context"
	"reflect"

	"github.com/komminarlabs/pulumi-influxdb/sdk/go/influxdb/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves a user.
func LookupUser(ctx *pulumi.Context, args *LookupUserArgs, opts ...pulumi.InvokeOption) (*LookupUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserResult
	err := ctx.Invoke("influxdb:index/getUser:getUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUser.
type LookupUserArgs struct {
	// The user ID.
	Id string `pulumi:"id"`
}

// A collection of values returned by getUser.
type LookupUserResult struct {
	// The user ID.
	Id string `pulumi:"id"`
	// The user name.
	Name string `pulumi:"name"`
	// The organization ID that the user belongs to. Null if the user is not a member of any organization.
	OrgId string `pulumi:"orgId"`
	// The role of the user in the organization (`member` or `owner`). Null if the user is not a member of any organization.
	OrgRole string `pulumi:"orgRole"`
	// The password of the user. This will be always `null`.
	Password string `pulumi:"password"`
	// The status of a user.
	Status string `pulumi:"status"`
}

func LookupUserOutput(ctx *pulumi.Context, args LookupUserOutputArgs, opts ...pulumi.InvokeOption) LookupUserResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupUserResultOutput, error) {
			args := v.(LookupUserArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("influxdb:index/getUser:getUser", args, LookupUserResultOutput{}, options).(LookupUserResultOutput), nil
		}).(LookupUserResultOutput)
}

// A collection of arguments for invoking getUser.
type LookupUserOutputArgs struct {
	// The user ID.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserArgs)(nil)).Elem()
}

// A collection of values returned by getUser.
type LookupUserResultOutput struct{ *pulumi.OutputState }

func (LookupUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserResult)(nil)).Elem()
}

func (o LookupUserResultOutput) ToLookupUserResultOutput() LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) ToLookupUserResultOutputWithContext(ctx context.Context) LookupUserResultOutput {
	return o
}

// The user ID.
func (o LookupUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// The user name.
func (o LookupUserResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Name }).(pulumi.StringOutput)
}

// The organization ID that the user belongs to. Null if the user is not a member of any organization.
func (o LookupUserResultOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.OrgId }).(pulumi.StringOutput)
}

// The role of the user in the organization (`member` or `owner`). Null if the user is not a member of any organization.
func (o LookupUserResultOutput) OrgRole() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.OrgRole }).(pulumi.StringOutput)
}

// The password of the user. This will be always `null`.
func (o LookupUserResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Password }).(pulumi.StringOutput)
}

// The status of a user.
func (o LookupUserResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Status }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserResultOutput{})
}
