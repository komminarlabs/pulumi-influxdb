// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package influxdb

import (
	"context"
	"reflect"

	"errors"
	"github.com/komminarlabs/pulumi-influxdb/sdk/go/influxdb/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates and manages a task using Flux scripts with task options.
//
// ## Task Configuration
//
// Tasks are configured using Flux scripts that include an `option task` block. All task configuration, including scheduling, is defined within the Flux script itself. For more information on Flux scripts and task options, refer to the [InfluxDB documentation on tasks](https://docs.influxdata.com/influxdb/v2/process-data/get-started/#components-of-a-task).
//
// ### Task Options in Flux
//
// The Flux script must include an `option task` block that defines the task's behavior. For detailed information about all available task options, see the [InfluxDB documentation on defining task options](https://docs.influxdata.com/influxdb/v2/process-data/get-started/#define-task-options).
//
// **Example configuration with cron scheduling:**
//
// ```go
// package main
//
// import (
//
//	"github.com/komminarlabs/pulumi-influxdb/sdk/go/influxdb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := influxdb.NewTask(ctx, "example_cron", &influxdb.TaskArgs{
//				OrgId: pulumi.Any(orgId),
//				Flux: pulumi.String(`option task = {
//	  name: "Daily Processing Task",
//	  cron: "0 0 * * *",        # Run daily at midnight
//	  offset: 30s,              # Delay execution by 30 seconds
//	}
//
// from(bucket: "my-bucket")
//
//	|> range(start: -24h)
//	|> filter(fn: (r) => r._measurement == "temperature")
//	|> mean()
//	|> to(bucket: "daily-averages")
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// **Example configuration with interval scheduling:**
//
// ```go
// package main
//
// import (
//
//	"github.com/komminarlabs/pulumi-influxdb/sdk/go/influxdb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := influxdb.NewTask(ctx, "example_interval", &influxdb.TaskArgs{
//				OrgId: pulumi.Any(orgId),
//				Flux: pulumi.String(`option task = {
//	  name: "Hourly Processing Task",
//	  every: 1h,                # Run every hour
//	  offset: 10m,              # Start 10 minutes into each hour
//	}
//
// from(bucket: "my-bucket")
//
//	|> range(start: -1h)
//	|> filter(fn: (r) => r._measurement == "cpu")
//	|> mean()
//	|> to(bucket: "hourly-stats")
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Task struct {
	pulumi.CustomResourceState

	// The authorization ID. Specifies the authorization used when the task communicates with the query engine.
	AuthorizationId pulumi.StringOutput `pulumi:"authorizationId"`
	// The timestamp when the task was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The Cron expression that defines the schedule on which the task runs.
	Cron pulumi.StringOutput `pulumi:"cron"`
	// The description of the task.
	Description pulumi.StringOutput `pulumi:"description"`
	// The interval [duration literal](https://docs.influxdata.com/influxdb/v2/reference/glossary/#rfc3339-timestamp) at which the task runs. every also determines when the task first runs, depending on the specified time.
	Every pulumi.StringOutput `pulumi:"every"`
	// The [Flux script](https://docs.influxdata.com/influxdb/v2/process-data/get-started/#components-of-a-task) that the task executes.
	Flux pulumi.StringOutput `pulumi:"flux"`
	// The labels associated with the task.
	Labels TaskLabelArrayOutput `pulumi:"labels"`
	// The error message from the last task run, if any.
	LastRunError pulumi.StringOutput `pulumi:"lastRunError"`
	// The status of the last task run.
	LastRunStatus pulumi.StringOutput `pulumi:"lastRunStatus"`
	// A timestamp [RFC3339 date/time format](https://docs.influxdata.com/influxdb/v2/reference/glossary/#rfc3339-timestamp) of the latest scheduled and completed run.
	LatestCompleted pulumi.StringOutput `pulumi:"latestCompleted"`
	// Links related to the task.
	Links TaskLinksOutput `pulumi:"links"`
	// The name of the task.
	Name pulumi.StringOutput `pulumi:"name"`
	// The duration to delay execution of the task after the scheduled time has elapsed. 0 removes the offset.
	Offset pulumi.StringOutput `pulumi:"offset"`
	// The organization name. Specifies the organization that owns the task.
	Org pulumi.StringOutput `pulumi:"org"`
	// The organization ID. Specifies the organization that owns the task.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// The user ID. Specifies the owner of the task.
	OwnerId pulumi.StringOutput `pulumi:"ownerId"`
	// The status of the task (`active` or `inactive`).
	Status pulumi.StringOutput `pulumi:"status"`
	// The timestamp when the task was last updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewTask registers a new resource with the given unique name, arguments, and options.
func NewTask(ctx *pulumi.Context,
	name string, args *TaskArgs, opts ...pulumi.ResourceOption) (*Task, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Flux == nil {
		return nil, errors.New("invalid value for required argument 'Flux'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Task
	err := ctx.RegisterResource("influxdb:index/task:Task", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTask gets an existing Task resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TaskState, opts ...pulumi.ResourceOption) (*Task, error) {
	var resource Task
	err := ctx.ReadResource("influxdb:index/task:Task", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Task resources.
type taskState struct {
	// The authorization ID. Specifies the authorization used when the task communicates with the query engine.
	AuthorizationId *string `pulumi:"authorizationId"`
	// The timestamp when the task was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The Cron expression that defines the schedule on which the task runs.
	Cron *string `pulumi:"cron"`
	// The description of the task.
	Description *string `pulumi:"description"`
	// The interval [duration literal](https://docs.influxdata.com/influxdb/v2/reference/glossary/#rfc3339-timestamp) at which the task runs. every also determines when the task first runs, depending on the specified time.
	Every *string `pulumi:"every"`
	// The [Flux script](https://docs.influxdata.com/influxdb/v2/process-data/get-started/#components-of-a-task) that the task executes.
	Flux *string `pulumi:"flux"`
	// The labels associated with the task.
	Labels []TaskLabel `pulumi:"labels"`
	// The error message from the last task run, if any.
	LastRunError *string `pulumi:"lastRunError"`
	// The status of the last task run.
	LastRunStatus *string `pulumi:"lastRunStatus"`
	// A timestamp [RFC3339 date/time format](https://docs.influxdata.com/influxdb/v2/reference/glossary/#rfc3339-timestamp) of the latest scheduled and completed run.
	LatestCompleted *string `pulumi:"latestCompleted"`
	// Links related to the task.
	Links *TaskLinks `pulumi:"links"`
	// The name of the task.
	Name *string `pulumi:"name"`
	// The duration to delay execution of the task after the scheduled time has elapsed. 0 removes the offset.
	Offset *string `pulumi:"offset"`
	// The organization name. Specifies the organization that owns the task.
	Org *string `pulumi:"org"`
	// The organization ID. Specifies the organization that owns the task.
	OrgId *string `pulumi:"orgId"`
	// The user ID. Specifies the owner of the task.
	OwnerId *string `pulumi:"ownerId"`
	// The status of the task (`active` or `inactive`).
	Status *string `pulumi:"status"`
	// The timestamp when the task was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type TaskState struct {
	// The authorization ID. Specifies the authorization used when the task communicates with the query engine.
	AuthorizationId pulumi.StringPtrInput
	// The timestamp when the task was created.
	CreatedAt pulumi.StringPtrInput
	// The Cron expression that defines the schedule on which the task runs.
	Cron pulumi.StringPtrInput
	// The description of the task.
	Description pulumi.StringPtrInput
	// The interval [duration literal](https://docs.influxdata.com/influxdb/v2/reference/glossary/#rfc3339-timestamp) at which the task runs. every also determines when the task first runs, depending on the specified time.
	Every pulumi.StringPtrInput
	// The [Flux script](https://docs.influxdata.com/influxdb/v2/process-data/get-started/#components-of-a-task) that the task executes.
	Flux pulumi.StringPtrInput
	// The labels associated with the task.
	Labels TaskLabelArrayInput
	// The error message from the last task run, if any.
	LastRunError pulumi.StringPtrInput
	// The status of the last task run.
	LastRunStatus pulumi.StringPtrInput
	// A timestamp [RFC3339 date/time format](https://docs.influxdata.com/influxdb/v2/reference/glossary/#rfc3339-timestamp) of the latest scheduled and completed run.
	LatestCompleted pulumi.StringPtrInput
	// Links related to the task.
	Links TaskLinksPtrInput
	// The name of the task.
	Name pulumi.StringPtrInput
	// The duration to delay execution of the task after the scheduled time has elapsed. 0 removes the offset.
	Offset pulumi.StringPtrInput
	// The organization name. Specifies the organization that owns the task.
	Org pulumi.StringPtrInput
	// The organization ID. Specifies the organization that owns the task.
	OrgId pulumi.StringPtrInput
	// The user ID. Specifies the owner of the task.
	OwnerId pulumi.StringPtrInput
	// The status of the task (`active` or `inactive`).
	Status pulumi.StringPtrInput
	// The timestamp when the task was last updated.
	UpdatedAt pulumi.StringPtrInput
}

func (TaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*taskState)(nil)).Elem()
}

type taskArgs struct {
	// The [Flux script](https://docs.influxdata.com/influxdb/v2/process-data/get-started/#components-of-a-task) that the task executes.
	Flux string `pulumi:"flux"`
	// The organization ID. Specifies the organization that owns the task.
	OrgId string `pulumi:"orgId"`
	// The status of the task (`active` or `inactive`).
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a Task resource.
type TaskArgs struct {
	// The [Flux script](https://docs.influxdata.com/influxdb/v2/process-data/get-started/#components-of-a-task) that the task executes.
	Flux pulumi.StringInput
	// The organization ID. Specifies the organization that owns the task.
	OrgId pulumi.StringInput
	// The status of the task (`active` or `inactive`).
	Status pulumi.StringPtrInput
}

func (TaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*taskArgs)(nil)).Elem()
}

type TaskInput interface {
	pulumi.Input

	ToTaskOutput() TaskOutput
	ToTaskOutputWithContext(ctx context.Context) TaskOutput
}

func (*Task) ElementType() reflect.Type {
	return reflect.TypeOf((**Task)(nil)).Elem()
}

func (i *Task) ToTaskOutput() TaskOutput {
	return i.ToTaskOutputWithContext(context.Background())
}

func (i *Task) ToTaskOutputWithContext(ctx context.Context) TaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskOutput)
}

// TaskArrayInput is an input type that accepts TaskArray and TaskArrayOutput values.
// You can construct a concrete instance of `TaskArrayInput` via:
//
//	TaskArray{ TaskArgs{...} }
type TaskArrayInput interface {
	pulumi.Input

	ToTaskArrayOutput() TaskArrayOutput
	ToTaskArrayOutputWithContext(context.Context) TaskArrayOutput
}

type TaskArray []TaskInput

func (TaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Task)(nil)).Elem()
}

func (i TaskArray) ToTaskArrayOutput() TaskArrayOutput {
	return i.ToTaskArrayOutputWithContext(context.Background())
}

func (i TaskArray) ToTaskArrayOutputWithContext(ctx context.Context) TaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskArrayOutput)
}

// TaskMapInput is an input type that accepts TaskMap and TaskMapOutput values.
// You can construct a concrete instance of `TaskMapInput` via:
//
//	TaskMap{ "key": TaskArgs{...} }
type TaskMapInput interface {
	pulumi.Input

	ToTaskMapOutput() TaskMapOutput
	ToTaskMapOutputWithContext(context.Context) TaskMapOutput
}

type TaskMap map[string]TaskInput

func (TaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Task)(nil)).Elem()
}

func (i TaskMap) ToTaskMapOutput() TaskMapOutput {
	return i.ToTaskMapOutputWithContext(context.Background())
}

func (i TaskMap) ToTaskMapOutputWithContext(ctx context.Context) TaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskMapOutput)
}

type TaskOutput struct{ *pulumi.OutputState }

func (TaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Task)(nil)).Elem()
}

func (o TaskOutput) ToTaskOutput() TaskOutput {
	return o
}

func (o TaskOutput) ToTaskOutputWithContext(ctx context.Context) TaskOutput {
	return o
}

// The authorization ID. Specifies the authorization used when the task communicates with the query engine.
func (o TaskOutput) AuthorizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.AuthorizationId }).(pulumi.StringOutput)
}

// The timestamp when the task was created.
func (o TaskOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The Cron expression that defines the schedule on which the task runs.
func (o TaskOutput) Cron() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.Cron }).(pulumi.StringOutput)
}

// The description of the task.
func (o TaskOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The interval [duration literal](https://docs.influxdata.com/influxdb/v2/reference/glossary/#rfc3339-timestamp) at which the task runs. every also determines when the task first runs, depending on the specified time.
func (o TaskOutput) Every() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.Every }).(pulumi.StringOutput)
}

// The [Flux script](https://docs.influxdata.com/influxdb/v2/process-data/get-started/#components-of-a-task) that the task executes.
func (o TaskOutput) Flux() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.Flux }).(pulumi.StringOutput)
}

// The labels associated with the task.
func (o TaskOutput) Labels() TaskLabelArrayOutput {
	return o.ApplyT(func(v *Task) TaskLabelArrayOutput { return v.Labels }).(TaskLabelArrayOutput)
}

// The error message from the last task run, if any.
func (o TaskOutput) LastRunError() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.LastRunError }).(pulumi.StringOutput)
}

// The status of the last task run.
func (o TaskOutput) LastRunStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.LastRunStatus }).(pulumi.StringOutput)
}

// A timestamp [RFC3339 date/time format](https://docs.influxdata.com/influxdb/v2/reference/glossary/#rfc3339-timestamp) of the latest scheduled and completed run.
func (o TaskOutput) LatestCompleted() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.LatestCompleted }).(pulumi.StringOutput)
}

// Links related to the task.
func (o TaskOutput) Links() TaskLinksOutput {
	return o.ApplyT(func(v *Task) TaskLinksOutput { return v.Links }).(TaskLinksOutput)
}

// The name of the task.
func (o TaskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The duration to delay execution of the task after the scheduled time has elapsed. 0 removes the offset.
func (o TaskOutput) Offset() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.Offset }).(pulumi.StringOutput)
}

// The organization name. Specifies the organization that owns the task.
func (o TaskOutput) Org() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.Org }).(pulumi.StringOutput)
}

// The organization ID. Specifies the organization that owns the task.
func (o TaskOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// The user ID. Specifies the owner of the task.
func (o TaskOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

// The status of the task (`active` or `inactive`).
func (o TaskOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The timestamp when the task was last updated.
func (o TaskOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type TaskArrayOutput struct{ *pulumi.OutputState }

func (TaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Task)(nil)).Elem()
}

func (o TaskArrayOutput) ToTaskArrayOutput() TaskArrayOutput {
	return o
}

func (o TaskArrayOutput) ToTaskArrayOutputWithContext(ctx context.Context) TaskArrayOutput {
	return o
}

func (o TaskArrayOutput) Index(i pulumi.IntInput) TaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Task {
		return vs[0].([]*Task)[vs[1].(int)]
	}).(TaskOutput)
}

type TaskMapOutput struct{ *pulumi.OutputState }

func (TaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Task)(nil)).Elem()
}

func (o TaskMapOutput) ToTaskMapOutput() TaskMapOutput {
	return o
}

func (o TaskMapOutput) ToTaskMapOutputWithContext(ctx context.Context) TaskMapOutput {
	return o
}

func (o TaskMapOutput) MapIndex(k pulumi.StringInput) TaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Task {
		return vs[0].(map[string]*Task)[vs[1].(string)]
	}).(TaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TaskInput)(nil)).Elem(), &Task{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskArrayInput)(nil)).Elem(), TaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskMapInput)(nil)).Elem(), TaskMap{})
	pulumi.RegisterOutputType(TaskOutput{})
	pulumi.RegisterOutputType(TaskArrayOutput{})
	pulumi.RegisterOutputType(TaskMapOutput{})
}
