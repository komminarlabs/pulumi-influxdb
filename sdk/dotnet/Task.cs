// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace KomminarLabs.InfluxDB
{
    /// <summary>
    /// Creates and manages a task using Flux scripts with task options.
    /// 
    /// ## Task Configuration
    /// 
    /// Tasks are configured using Flux scripts that include an `option task` block. All task configuration, including scheduling, is defined within the Flux script itself. For more information on Flux scripts and task options, refer to the [InfluxDB documentation on tasks](https://docs.influxdata.com/influxdb/v2/process-data/get-started/#components-of-a-task).
    /// 
    /// ### Task Options in Flux
    /// 
    /// The Flux script must include an `option task` block that defines the task's behavior. For detailed information about all available task options, see the [InfluxDB documentation on defining task options](https://docs.influxdata.com/influxdb/v2/process-data/get-started/#define-task-options).
    /// 
    /// **Example configuration with cron scheduling:**
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using InfluxDB = KomminarLabs.InfluxDB;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleCron = new InfluxDB.Task("example_cron", new()
    ///     {
    ///         OrgId = orgId,
    ///         Flux = @"option task = {
    ///   name: ""Daily Processing Task"",
    ///   cron: ""0 0 * * *"",        # Run daily at midnight
    ///   offset: 30s,              # Delay execution by 30 seconds
    /// }
    ///     
    /// from(bucket: ""my-bucket"")
    ///   |&gt; range(start: -24h)
    ///   |&gt; filter(fn: (r) =&gt; r._measurement == ""temperature"")
    ///   |&gt; mean()
    ///   |&gt; to(bucket: ""daily-averages"")
    /// ",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// **Example configuration with interval scheduling:**
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using InfluxDB = KomminarLabs.InfluxDB;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleInterval = new InfluxDB.Task("example_interval", new()
    ///     {
    ///         OrgId = orgId,
    ///         Flux = @"option task = {
    ///   name: ""Hourly Processing Task"",
    ///   every: 1h,                # Run every hour
    ///   offset: 10m,              # Start 10 minutes into each hour
    /// }
    ///     
    /// from(bucket: ""my-bucket"")
    ///   |&gt; range(start: -1h)
    ///   |&gt; filter(fn: (r) =&gt; r._measurement == ""cpu"")
    ///   |&gt; mean()
    ///   |&gt; to(bucket: ""hourly-stats"")
    /// ",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [InfluxDBResourceType("influxdb:index/task:Task")]
    public partial class Task : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The authorization ID. Specifies the authorization used when the task communicates with the query engine.
        /// </summary>
        [Output("authorizationId")]
        public Output<string> AuthorizationId { get; private set; } = null!;

        /// <summary>
        /// The timestamp when the task was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The Cron expression that defines the schedule on which the task runs.
        /// </summary>
        [Output("cron")]
        public Output<string> Cron { get; private set; } = null!;

        /// <summary>
        /// The description of the task.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The interval [duration literal](https://docs.influxdata.com/influxdb/v2/reference/glossary/#rfc3339-timestamp) at which the task runs. every also determines when the task first runs, depending on the specified time.
        /// </summary>
        [Output("every")]
        public Output<string> Every { get; private set; } = null!;

        /// <summary>
        /// The [Flux script](https://docs.influxdata.com/influxdb/v2/process-data/get-started/#components-of-a-task) that the task executes.
        /// </summary>
        [Output("flux")]
        public Output<string> Flux { get; private set; } = null!;

        /// <summary>
        /// The labels associated with the task.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableArray<Outputs.TaskLabel>> Labels { get; private set; } = null!;

        /// <summary>
        /// The error message from the last task run, if any.
        /// </summary>
        [Output("lastRunError")]
        public Output<string> LastRunError { get; private set; } = null!;

        /// <summary>
        /// The status of the last task run.
        /// </summary>
        [Output("lastRunStatus")]
        public Output<string> LastRunStatus { get; private set; } = null!;

        /// <summary>
        /// A timestamp [RFC3339 date/time format](https://docs.influxdata.com/influxdb/v2/reference/glossary/#rfc3339-timestamp) of the latest scheduled and completed run.
        /// </summary>
        [Output("latestCompleted")]
        public Output<string> LatestCompleted { get; private set; } = null!;

        /// <summary>
        /// Links related to the task.
        /// </summary>
        [Output("links")]
        public Output<Outputs.TaskLinks> Links { get; private set; } = null!;

        /// <summary>
        /// The name of the task.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The duration to delay execution of the task after the scheduled time has elapsed. 0 removes the offset.
        /// </summary>
        [Output("offset")]
        public Output<string> Offset { get; private set; } = null!;

        /// <summary>
        /// The organization name. Specifies the organization that owns the task.
        /// </summary>
        [Output("org")]
        public Output<string> Org { get; private set; } = null!;

        /// <summary>
        /// The organization ID. Specifies the organization that owns the task.
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// The user ID. Specifies the owner of the task.
        /// </summary>
        [Output("ownerId")]
        public Output<string> OwnerId { get; private set; } = null!;

        /// <summary>
        /// The status of the task (`active` or `inactive`).
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The timestamp when the task was last updated.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a Task resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Task(string name, TaskArgs args, CustomResourceOptions? options = null)
            : base("influxdb:index/task:Task", name, args ?? new TaskArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Task(string name, Input<string> id, TaskState? state = null, CustomResourceOptions? options = null)
            : base("influxdb:index/task:Task", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/komminarlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Task resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Task Get(string name, Input<string> id, TaskState? state = null, CustomResourceOptions? options = null)
        {
            return new Task(name, id, state, options);
        }
    }

    public sealed class TaskArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The [Flux script](https://docs.influxdata.com/influxdb/v2/process-data/get-started/#components-of-a-task) that the task executes.
        /// </summary>
        [Input("flux", required: true)]
        public Input<string> Flux { get; set; } = null!;

        /// <summary>
        /// The organization ID. Specifies the organization that owns the task.
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// The status of the task (`active` or `inactive`).
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public TaskArgs()
        {
        }
        public static new TaskArgs Empty => new TaskArgs();
    }

    public sealed class TaskState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The authorization ID. Specifies the authorization used when the task communicates with the query engine.
        /// </summary>
        [Input("authorizationId")]
        public Input<string>? AuthorizationId { get; set; }

        /// <summary>
        /// The timestamp when the task was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The Cron expression that defines the schedule on which the task runs.
        /// </summary>
        [Input("cron")]
        public Input<string>? Cron { get; set; }

        /// <summary>
        /// The description of the task.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The interval [duration literal](https://docs.influxdata.com/influxdb/v2/reference/glossary/#rfc3339-timestamp) at which the task runs. every also determines when the task first runs, depending on the specified time.
        /// </summary>
        [Input("every")]
        public Input<string>? Every { get; set; }

        /// <summary>
        /// The [Flux script](https://docs.influxdata.com/influxdb/v2/process-data/get-started/#components-of-a-task) that the task executes.
        /// </summary>
        [Input("flux")]
        public Input<string>? Flux { get; set; }

        [Input("labels")]
        private InputList<Inputs.TaskLabelGetArgs>? _labels;

        /// <summary>
        /// The labels associated with the task.
        /// </summary>
        public InputList<Inputs.TaskLabelGetArgs> Labels
        {
            get => _labels ?? (_labels = new InputList<Inputs.TaskLabelGetArgs>());
            set => _labels = value;
        }

        /// <summary>
        /// The error message from the last task run, if any.
        /// </summary>
        [Input("lastRunError")]
        public Input<string>? LastRunError { get; set; }

        /// <summary>
        /// The status of the last task run.
        /// </summary>
        [Input("lastRunStatus")]
        public Input<string>? LastRunStatus { get; set; }

        /// <summary>
        /// A timestamp [RFC3339 date/time format](https://docs.influxdata.com/influxdb/v2/reference/glossary/#rfc3339-timestamp) of the latest scheduled and completed run.
        /// </summary>
        [Input("latestCompleted")]
        public Input<string>? LatestCompleted { get; set; }

        /// <summary>
        /// Links related to the task.
        /// </summary>
        [Input("links")]
        public Input<Inputs.TaskLinksGetArgs>? Links { get; set; }

        /// <summary>
        /// The name of the task.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The duration to delay execution of the task after the scheduled time has elapsed. 0 removes the offset.
        /// </summary>
        [Input("offset")]
        public Input<string>? Offset { get; set; }

        /// <summary>
        /// The organization name. Specifies the organization that owns the task.
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// The organization ID. Specifies the organization that owns the task.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// The user ID. Specifies the owner of the task.
        /// </summary>
        [Input("ownerId")]
        public Input<string>? OwnerId { get; set; }

        /// <summary>
        /// The status of the task (`active` or `inactive`).
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The timestamp when the task was last updated.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public TaskState()
        {
        }
        public static new TaskState Empty => new TaskState();
    }
}
