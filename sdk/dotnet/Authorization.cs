// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace KomminarLabs.InfluxDB
{
    /// <summary>
    /// Creates and manages an authorization and returns the authorization with the generated API token. Use this resource to create/manage an authorization, which generates an API token with permissions to read or write to a specific resource or type of resource.
    /// </summary>
    [InfluxDBResourceType("influxdb:index/authorization:Authorization")]
    public partial class Authorization : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Authorization creation date.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// A description of the token.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Organization name. Specifies the organization that owns the authorization.
        /// </summary>
        [Output("org")]
        public Output<string> Org { get; private set; } = null!;

        /// <summary>
        /// An organization ID. Specifies the organization that owns the authorization.
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// A list of permissions for an authorization.
        /// </summary>
        [Output("permissions")]
        public Output<ImmutableArray<Outputs.AuthorizationPermission>> Permissions { get; private set; } = null!;

        /// <summary>
        /// Status of the token. Valid values are `active` or `inactive`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The API token.
        /// </summary>
        [Output("token")]
        public Output<string> Token { get; private set; } = null!;

        /// <summary>
        /// Last Authorization update date.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// A user name. Specifies the user that the authorization is scoped to.
        /// </summary>
        [Output("user")]
        public Output<string?> User { get; private set; } = null!;

        /// <summary>
        /// A user ID. Specifies the user that the authorization is scoped to.
        /// </summary>
        [Output("userId")]
        public Output<string?> UserId { get; private set; } = null!;


        /// <summary>
        /// Create a Authorization resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Authorization(string name, AuthorizationArgs args, CustomResourceOptions? options = null)
            : base("influxdb:index/authorization:Authorization", name, args ?? new AuthorizationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Authorization(string name, Input<string> id, AuthorizationState? state = null, CustomResourceOptions? options = null)
            : base("influxdb:index/authorization:Authorization", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/komminarlabs",
                AdditionalSecretOutputs =
                {
                    "token",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Authorization resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Authorization Get(string name, Input<string> id, AuthorizationState? state = null, CustomResourceOptions? options = null)
        {
            return new Authorization(name, id, state, options);
        }
    }

    public sealed class AuthorizationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description of the token.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// An organization ID. Specifies the organization that owns the authorization.
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        [Input("permissions", required: true)]
        private InputList<Inputs.AuthorizationPermissionArgs>? _permissions;

        /// <summary>
        /// A list of permissions for an authorization.
        /// </summary>
        public InputList<Inputs.AuthorizationPermissionArgs> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<Inputs.AuthorizationPermissionArgs>());
            set => _permissions = value;
        }

        /// <summary>
        /// Status of the token. Valid values are `active` or `inactive`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// A user name. Specifies the user that the authorization is scoped to.
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        /// <summary>
        /// A user ID. Specifies the user that the authorization is scoped to.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public AuthorizationArgs()
        {
        }
        public static new AuthorizationArgs Empty => new AuthorizationArgs();
    }

    public sealed class AuthorizationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Authorization creation date.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// A description of the token.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Organization name. Specifies the organization that owns the authorization.
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// An organization ID. Specifies the organization that owns the authorization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        [Input("permissions")]
        private InputList<Inputs.AuthorizationPermissionGetArgs>? _permissions;

        /// <summary>
        /// A list of permissions for an authorization.
        /// </summary>
        public InputList<Inputs.AuthorizationPermissionGetArgs> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<Inputs.AuthorizationPermissionGetArgs>());
            set => _permissions = value;
        }

        /// <summary>
        /// Status of the token. Valid values are `active` or `inactive`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// The API token.
        /// </summary>
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Last Authorization update date.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// A user name. Specifies the user that the authorization is scoped to.
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        /// <summary>
        /// A user ID. Specifies the user that the authorization is scoped to.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public AuthorizationState()
        {
        }
        public static new AuthorizationState Empty => new AuthorizationState();
    }
}
