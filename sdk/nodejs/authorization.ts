// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Creates and manages an authorization and returns the authorization with the generated API token. Use this resource to create/manage an authorization, which generates an API token with permissions to read or write to a specific resource or type of resource.
 */
export class Authorization extends pulumi.CustomResource {
    /**
     * Get an existing Authorization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthorizationState, opts?: pulumi.CustomResourceOptions): Authorization {
        return new Authorization(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'influxdb:index/authorization:Authorization';

    /**
     * Returns true if the given object is an instance of Authorization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Authorization {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Authorization.__pulumiType;
    }

    /**
     * Authorization creation date.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * A description of the token.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * An organization name. The organization that owns the resource.
     */
    public /*out*/ readonly org!: pulumi.Output<string>;
    /**
     * An organization ID. Identifies the organization that owns the resource.
     */
    public readonly orgId!: pulumi.Output<string>;
    /**
     * A list of permissions for an authorization.
     */
    public readonly permissions!: pulumi.Output<outputs.AuthorizationPermission[]>;
    /**
     * Status of the token. Valid values are `active` or `inactive`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * The API token.
     */
    public /*out*/ readonly token!: pulumi.Output<string>;
    /**
     * Last Authorization update date.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * A user name. Specifies the user that the authorization is scoped to.
     */
    public readonly user!: pulumi.Output<string | undefined>;
    /**
     * A user ID. Specifies the user that the authorization is scoped to.
     */
    public readonly userId!: pulumi.Output<string | undefined>;

    /**
     * Create a Authorization resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthorizationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthorizationArgs | AuthorizationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthorizationState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as AuthorizationArgs | undefined;
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            if ((!args || args.permissions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissions'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["org"] = undefined /*out*/;
            resourceInputs["token"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Authorization.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Authorization resources.
 */
export interface AuthorizationState {
    /**
     * Authorization creation date.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * A description of the token.
     */
    description?: pulumi.Input<string>;
    /**
     * An organization name. The organization that owns the resource.
     */
    org?: pulumi.Input<string>;
    /**
     * An organization ID. Identifies the organization that owns the resource.
     */
    orgId?: pulumi.Input<string>;
    /**
     * A list of permissions for an authorization.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.AuthorizationPermission>[]>;
    /**
     * Status of the token. Valid values are `active` or `inactive`.
     */
    status?: pulumi.Input<string>;
    /**
     * The API token.
     */
    token?: pulumi.Input<string>;
    /**
     * Last Authorization update date.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * A user name. Specifies the user that the authorization is scoped to.
     */
    user?: pulumi.Input<string>;
    /**
     * A user ID. Specifies the user that the authorization is scoped to.
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Authorization resource.
 */
export interface AuthorizationArgs {
    /**
     * A description of the token.
     */
    description?: pulumi.Input<string>;
    /**
     * An organization ID. Identifies the organization that owns the resource.
     */
    orgId: pulumi.Input<string>;
    /**
     * A list of permissions for an authorization.
     */
    permissions: pulumi.Input<pulumi.Input<inputs.AuthorizationPermission>[]>;
    /**
     * Status of the token. Valid values are `active` or `inactive`.
     */
    status?: pulumi.Input<string>;
    /**
     * A user name. Specifies the user that the authorization is scoped to.
     */
    user?: pulumi.Input<string>;
    /**
     * A user ID. Specifies the user that the authorization is scoped to.
     */
    userId?: pulumi.Input<string>;
}
