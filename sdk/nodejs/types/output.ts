// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AuthorizationPermission {
    /**
     * Permission action. Valid values are `read` or `write`.
     */
    action: string;
    resource: outputs.AuthorizationPermissionResource;
}

export interface AuthorizationPermissionResource {
    /**
     * A resource ID. Identifies a specific resource.
     */
    id?: string;
    /**
     * The name of the resource. **Note:** not all resource types have a name property.
     */
    name: string;
    /**
     * An organization name. The organization that owns the resource.
     */
    org: string;
    /**
     * An organization ID. Identifies the organization that owns the resource.
     */
    orgId: string;
    /**
     * A resource type. Identifies the API resource's type (or kind).
     */
    type: string;
}

export interface GetAuthorizationPermission {
    /**
     * Permission action.
     */
    action: string;
    resource: outputs.GetAuthorizationPermissionResource;
}

export interface GetAuthorizationPermissionResource {
    /**
     * A resource ID. Identifies a specific resource.
     */
    id: string;
    /**
     * The name of the resource. **Note:** not all resource types have a name property.
     */
    name: string;
    /**
     * An organization name. The organization that owns the resource.
     */
    org: string;
    /**
     * An organization ID. Identifies the organization that owns the resource.
     */
    orgId: string;
    /**
     * A resource type. Identifies the API resource's type (or kind).
     */
    type: string;
}

export interface GetAuthorizationsAuthorization {
    /**
     * Authorizations creation date.
     */
    createdAt: string;
    /**
     * A description of the token.
     */
    description: string;
    /**
     * The authorization ID.
     */
    id: string;
    /**
     * An Organization name. Specifies the organization that owns the authorization.
     */
    org: string;
    /**
     * An organization ID. Specifies the organization that owns the authorization.
     */
    orgId: string;
    /**
     * A list of permissions for an authorization.
     */
    permissions: outputs.GetAuthorizationsAuthorizationPermission[];
    /**
     * Status of the token.
     */
    status: string;
    /**
     * The API token.
     */
    token: string;
    /**
     * Last Authorizations update date.
     */
    updatedAt: string;
    /**
     * A user name. Specifies the user that the authorization is scoped to.
     */
    user: string;
    /**
     * A user ID. Specifies the user that the authorization is scoped to.
     */
    userId: string;
}

export interface GetAuthorizationsAuthorizationPermission {
    /**
     * Permission action.
     */
    action: string;
    resource: outputs.GetAuthorizationsAuthorizationPermissionResource;
}

export interface GetAuthorizationsAuthorizationPermissionResource {
    /**
     * A resource ID. Identifies a specific resource.
     */
    id: string;
    /**
     * The name of the resource. **Note:** not all resource types have a name property.
     */
    name: string;
    /**
     * An organization name. The organization that owns the resource.
     */
    org: string;
    /**
     * An organization ID. Identifies the organization that owns the resource.
     */
    orgId: string;
    /**
     * A resource type. Identifies the API resource's type (or kind).
     */
    type: string;
}

export interface GetBucketsBucket {
    /**
     * Bucket creation date.
     */
    createdAt: string;
    /**
     * A description of the bucket.
     */
    description: string;
    /**
     * A Bucket ID.
     */
    id: string;
    /**
     * A Bucket name.
     */
    name: string;
    /**
     * An organization ID.
     */
    orgId: string;
    /**
     * The duration in seconds for how long data will be kept in the database. `0` represents infinite retention.
     */
    retentionPeriod: number;
    /**
     * The Bucket type.
     */
    type: string;
    /**
     * Last bucket update date.
     */
    updatedAt: string;
}

export interface GetLabelsLabel {
    /**
     * The label ID.
     */
    id: string;
    /**
     * The label name.
     */
    name: string;
    /**
     * The organization ID.
     */
    orgId: string;
    /**
     * The key-value pairs associated with this label.
     */
    properties: {[key: string]: string};
}

export interface GetOrganizationsOrganization {
    /**
     * Organization creation date.
     */
    createdAt: string;
    /**
     * The description of the organization.
     */
    description: string;
    /**
     * An organization ID.
     */
    id: string;
    /**
     * The name of the organization.
     */
    name: string;
    /**
     * Last Organization update date.
     */
    updatedAt: string;
}

export interface GetTaskLabel {
    /**
     * The label ID.
     */
    id: string;
    /**
     * The label name.
     */
    name: string;
    /**
     * The organization ID.
     */
    orgId: string;
    /**
     * The key-value pairs associated with this label.
     */
    properties: {[key: string]: string};
}

export interface GetTaskLinks {
    /**
     * URI of resource.
     */
    labels: string;
    /**
     * URI of resource.
     */
    logs: string;
    /**
     * URI of resource.
     */
    members: string;
    /**
     * URI of resource.
     */
    owners: string;
    /**
     * URI of resource.
     */
    runs: string;
    /**
     * URI of resource.
     */
    self: string;
}

export interface GetTasksTask {
    /**
     * The authorization ID. Specifies the authorization used when the task communicates with the query engine.
     */
    authorizationId: string;
    /**
     * The timestamp when the task was created.
     */
    createdAt: string;
    /**
     * The Cron expression that defines the schedule on which the task runs. InfluxDB uses the system time when evaluating Cron expressions.
     */
    cron: string;
    /**
     * The description of the task.
     */
    description: string;
    /**
     * The interval [duration literal](https://docs.influxdata.com/influxdb/v2/reference/glossary/#rfc3339-timestamp) at which the task runs. every also determines when the task first runs, depending on the specified time.
     */
    every: string;
    /**
     * The Flux script that the task executes.
     */
    flux: string;
    /**
     * The task ID.
     */
    id: string;
    /**
     * The labels associated with the task.
     */
    labels: outputs.GetTasksTaskLabel[];
    /**
     * The error message from the last task run, if any.
     */
    lastRunError: string;
    /**
     * The status of the last task run.
     */
    lastRunStatus: string;
    /**
     * A timestamp [RFC3339 date/time format](https://docs.influxdata.com/influxdb/v2/reference/glossary/#rfc3339-timestamp) of the latest scheduled and completed run.
     */
    latestCompleted: string;
    /**
     * Links related to the task.
     */
    links: outputs.GetTasksTaskLinks;
    /**
     * The name of the task.
     */
    name: string;
    /**
     * The duration to delay execution of the task after the scheduled time has elapsed. 0 removes the offset.
     */
    offset: string;
    /**
     * The organization name. Specifies the organization that owns the task.
     */
    org: string;
    /**
     * The organization ID. Specifies the organization that owns the task.
     */
    orgId: string;
    /**
     * The user ID. Specifies the owner of the task.
     */
    ownerId: string;
    /**
     * The status of the task (`active` or `inactive`).
     */
    status: string;
    /**
     * The timestamp when the task was last updated.
     */
    updatedAt: string;
}

export interface GetTasksTaskLabel {
    /**
     * The label ID.
     */
    id: string;
    /**
     * The label name.
     */
    name: string;
    /**
     * The organization ID.
     */
    orgId: string;
    /**
     * The key-value pairs associated with this label.
     */
    properties: {[key: string]: string};
}

export interface GetTasksTaskLinks {
    /**
     * URI of resource.
     */
    labels: string;
    /**
     * URI of resource.
     */
    logs: string;
    /**
     * URI of resource.
     */
    members: string;
    /**
     * URI of resource.
     */
    owners: string;
    /**
     * URI of resource.
     */
    runs: string;
    /**
     * URI of resource.
     */
    self: string;
}

export interface GetUsersUser {
    /**
     * The user ID.
     */
    id: string;
    /**
     * The user name.
     */
    name: string;
    /**
     * The organization ID that the user belongs to. Null if the user is not a member of any organization.
     */
    orgId: string;
    /**
     * The role of the user in the organization (`member` or `owner`). Null if the user is not a member of any organization.
     */
    orgRole: string;
    /**
     * The password of the user. This will be always `null`.
     */
    password: string;
    /**
     * The status of a user.
     */
    status: string;
}

export interface TaskLabel {
    /**
     * The label ID.
     */
    id: string;
    /**
     * The label name.
     */
    name: string;
    /**
     * The organization ID.
     */
    orgId: string;
    /**
     * The key-value pairs associated with this label.
     */
    properties: {[key: string]: string};
}

export interface TaskLinks {
    /**
     * URI of resource.
     */
    labels: string;
    /**
     * URI of resource.
     */
    logs: string;
    /**
     * URI of resource.
     */
    members: string;
    /**
     * URI of resource.
     */
    owners: string;
    /**
     * URI of resource.
     */
    runs: string;
    /**
     * URI of resource.
     */
    self: string;
}

