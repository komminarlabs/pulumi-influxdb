// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Creates and manages a task using Flux scripts with task options.
 *
 * ## Task Configuration
 *
 * Tasks are configured using Flux scripts that include an `option task` block. All task configuration, including scheduling, is defined within the Flux script itself. For more information on Flux scripts and task options, refer to the [InfluxDB documentation on tasks](https://docs.influxdata.com/influxdb/v2/process-data/get-started/#components-of-a-task).
 *
 * ### Task Options in Flux
 *
 * The Flux script must include an `option task` block that defines the task's behavior. For detailed information about all available task options, see the [InfluxDB documentation on defining task options](https://docs.influxdata.com/influxdb/v2/process-data/get-started/#define-task-options).
 *
 * **Example configuration with cron scheduling:**
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as influxdb from "@komminarlabs/influxdb";
 *
 * const exampleCron = new influxdb.Task("example_cron", {
 *     orgId: orgId,
 *     flux: `option task = {
 *   name: "Daily Processing Task",
 *   cron: "0 0 * * *",        # Run daily at midnight
 *   offset: 30s,              # Delay execution by 30 seconds
 * }
 *     
 * from(bucket: "my-bucket")
 *   |> range(start: -24h)
 *   |> filter(fn: (r) => r._measurement == "temperature")
 *   |> mean()
 *   |> to(bucket: "daily-averages")
 * `,
 * });
 * ```
 *
 * **Example configuration with interval scheduling:**
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as influxdb from "@komminarlabs/influxdb";
 *
 * const exampleInterval = new influxdb.Task("example_interval", {
 *     orgId: orgId,
 *     flux: `option task = {
 *   name: "Hourly Processing Task",
 *   every: 1h,                # Run every hour
 *   offset: 10m,              # Start 10 minutes into each hour
 * }
 *     
 * from(bucket: "my-bucket")
 *   |> range(start: -1h)
 *   |> filter(fn: (r) => r._measurement == "cpu")
 *   |> mean()
 *   |> to(bucket: "hourly-stats")
 * `,
 * });
 * ```
 */
export class Task extends pulumi.CustomResource {
    /**
     * Get an existing Task resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TaskState, opts?: pulumi.CustomResourceOptions): Task {
        return new Task(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'influxdb:index/task:Task';

    /**
     * Returns true if the given object is an instance of Task.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Task {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Task.__pulumiType;
    }

    /**
     * The authorization ID. Specifies the authorization used when the task communicates with the query engine.
     */
    public /*out*/ readonly authorizationId!: pulumi.Output<string>;
    /**
     * The timestamp when the task was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The Cron expression that defines the schedule on which the task runs.
     */
    public /*out*/ readonly cron!: pulumi.Output<string>;
    /**
     * The description of the task.
     */
    public /*out*/ readonly description!: pulumi.Output<string>;
    /**
     * The interval [duration literal](https://docs.influxdata.com/influxdb/v2/reference/glossary/#rfc3339-timestamp) at which the task runs. every also determines when the task first runs, depending on the specified time.
     */
    public /*out*/ readonly every!: pulumi.Output<string>;
    /**
     * The [Flux script](https://docs.influxdata.com/influxdb/v2/process-data/get-started/#components-of-a-task) that the task executes.
     */
    public readonly flux!: pulumi.Output<string>;
    /**
     * The labels associated with the task.
     */
    public /*out*/ readonly labels!: pulumi.Output<outputs.TaskLabel[]>;
    /**
     * The error message from the last task run, if any.
     */
    public /*out*/ readonly lastRunError!: pulumi.Output<string>;
    /**
     * The status of the last task run.
     */
    public /*out*/ readonly lastRunStatus!: pulumi.Output<string>;
    /**
     * A timestamp [RFC3339 date/time format](https://docs.influxdata.com/influxdb/v2/reference/glossary/#rfc3339-timestamp) of the latest scheduled and completed run.
     */
    public /*out*/ readonly latestCompleted!: pulumi.Output<string>;
    /**
     * Links related to the task.
     */
    public /*out*/ readonly links!: pulumi.Output<outputs.TaskLinks>;
    /**
     * The name of the task.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The duration to delay execution of the task after the scheduled time has elapsed. 0 removes the offset.
     */
    public /*out*/ readonly offset!: pulumi.Output<string>;
    /**
     * The organization name. Specifies the organization that owns the task.
     */
    public /*out*/ readonly org!: pulumi.Output<string>;
    /**
     * The organization ID. Specifies the organization that owns the task.
     */
    public readonly orgId!: pulumi.Output<string>;
    /**
     * The user ID. Specifies the owner of the task.
     */
    public /*out*/ readonly ownerId!: pulumi.Output<string>;
    /**
     * The status of the task (`active` or `inactive`).
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * The timestamp when the task was last updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a Task resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TaskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TaskArgs | TaskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TaskState | undefined;
            resourceInputs["authorizationId"] = state ? state.authorizationId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["cron"] = state ? state.cron : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["every"] = state ? state.every : undefined;
            resourceInputs["flux"] = state ? state.flux : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["lastRunError"] = state ? state.lastRunError : undefined;
            resourceInputs["lastRunStatus"] = state ? state.lastRunStatus : undefined;
            resourceInputs["latestCompleted"] = state ? state.latestCompleted : undefined;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["offset"] = state ? state.offset : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["ownerId"] = state ? state.ownerId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as TaskArgs | undefined;
            if ((!args || args.flux === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flux'");
            }
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            resourceInputs["flux"] = args ? args.flux : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["authorizationId"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["cron"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["every"] = undefined /*out*/;
            resourceInputs["labels"] = undefined /*out*/;
            resourceInputs["lastRunError"] = undefined /*out*/;
            resourceInputs["lastRunStatus"] = undefined /*out*/;
            resourceInputs["latestCompleted"] = undefined /*out*/;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["offset"] = undefined /*out*/;
            resourceInputs["org"] = undefined /*out*/;
            resourceInputs["ownerId"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Task.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Task resources.
 */
export interface TaskState {
    /**
     * The authorization ID. Specifies the authorization used when the task communicates with the query engine.
     */
    authorizationId?: pulumi.Input<string>;
    /**
     * The timestamp when the task was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The Cron expression that defines the schedule on which the task runs.
     */
    cron?: pulumi.Input<string>;
    /**
     * The description of the task.
     */
    description?: pulumi.Input<string>;
    /**
     * The interval [duration literal](https://docs.influxdata.com/influxdb/v2/reference/glossary/#rfc3339-timestamp) at which the task runs. every also determines when the task first runs, depending on the specified time.
     */
    every?: pulumi.Input<string>;
    /**
     * The [Flux script](https://docs.influxdata.com/influxdb/v2/process-data/get-started/#components-of-a-task) that the task executes.
     */
    flux?: pulumi.Input<string>;
    /**
     * The labels associated with the task.
     */
    labels?: pulumi.Input<pulumi.Input<inputs.TaskLabel>[]>;
    /**
     * The error message from the last task run, if any.
     */
    lastRunError?: pulumi.Input<string>;
    /**
     * The status of the last task run.
     */
    lastRunStatus?: pulumi.Input<string>;
    /**
     * A timestamp [RFC3339 date/time format](https://docs.influxdata.com/influxdb/v2/reference/glossary/#rfc3339-timestamp) of the latest scheduled and completed run.
     */
    latestCompleted?: pulumi.Input<string>;
    /**
     * Links related to the task.
     */
    links?: pulumi.Input<inputs.TaskLinks>;
    /**
     * The name of the task.
     */
    name?: pulumi.Input<string>;
    /**
     * The duration to delay execution of the task after the scheduled time has elapsed. 0 removes the offset.
     */
    offset?: pulumi.Input<string>;
    /**
     * The organization name. Specifies the organization that owns the task.
     */
    org?: pulumi.Input<string>;
    /**
     * The organization ID. Specifies the organization that owns the task.
     */
    orgId?: pulumi.Input<string>;
    /**
     * The user ID. Specifies the owner of the task.
     */
    ownerId?: pulumi.Input<string>;
    /**
     * The status of the task (`active` or `inactive`).
     */
    status?: pulumi.Input<string>;
    /**
     * The timestamp when the task was last updated.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Task resource.
 */
export interface TaskArgs {
    /**
     * The [Flux script](https://docs.influxdata.com/influxdb/v2/process-data/get-started/#components-of-a-task) that the task executes.
     */
    flux: pulumi.Input<string>;
    /**
     * The organization ID. Specifies the organization that owns the task.
     */
    orgId: pulumi.Input<string>;
    /**
     * The status of the task (`active` or `inactive`).
     */
    status?: pulumi.Input<string>;
}
