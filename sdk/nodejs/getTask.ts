// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * List all task.
 */
export function getTask(args: GetTaskArgs, opts?: pulumi.InvokeOptions): Promise<GetTaskResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("influxdb:index/getTask:getTask", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getTask.
 */
export interface GetTaskArgs {
    /**
     * The task ID.
     */
    id: string;
}

/**
 * A collection of values returned by getTask.
 */
export interface GetTaskResult {
    /**
     * The authorization ID. Specifies the authorization used when the task communicates with the query engine.
     */
    readonly authorizationId: string;
    /**
     * The timestamp when the task was created.
     */
    readonly createdAt: string;
    /**
     * The Cron expression that defines the schedule on which the task runs. InfluxDB uses the system time when evaluating Cron expressions.
     */
    readonly cron: string;
    /**
     * The description of the task.
     */
    readonly description: string;
    /**
     * The interval [duration literal](https://docs.influxdata.com/influxdb/v2/reference/glossary/#rfc3339-timestamp) at which the task runs. every also determines when the task first runs, depending on the specified time.
     */
    readonly every: string;
    /**
     * The Flux script that the task executes.
     */
    readonly flux: string;
    /**
     * The task ID.
     */
    readonly id: string;
    /**
     * The labels associated with the task.
     */
    readonly labels: outputs.GetTaskLabel[];
    /**
     * The error message from the last task run, if any.
     */
    readonly lastRunError: string;
    /**
     * The status of the last task run.
     */
    readonly lastRunStatus: string;
    /**
     * A timestamp [RFC3339 date/time format](https://docs.influxdata.com/influxdb/v2/reference/glossary/#rfc3339-timestamp) of the latest scheduled and completed run.
     */
    readonly latestCompleted: string;
    /**
     * Links related to the task.
     */
    readonly links: outputs.GetTaskLinks;
    /**
     * The name of the task.
     */
    readonly name: string;
    /**
     * The duration to delay execution of the task after the scheduled time has elapsed. 0 removes the offset.
     */
    readonly offset: string;
    /**
     * The organization name. Specifies the organization that owns the task.
     */
    readonly org: string;
    /**
     * The organization ID. Specifies the organization that owns the task.
     */
    readonly orgId: string;
    /**
     * The user ID. Specifies the owner of the task.
     */
    readonly ownerId: string;
    /**
     * The status of the task (`active` or `inactive`).
     */
    readonly status: string;
    /**
     * The timestamp when the task was last updated.
     */
    readonly updatedAt: string;
}
/**
 * List all task.
 */
export function getTaskOutput(args: GetTaskOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetTaskResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("influxdb:index/getTask:getTask", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getTask.
 */
export interface GetTaskOutputArgs {
    /**
     * The task ID.
     */
    id: pulumi.Input<string>;
}
